package org.yeeku.dao;

import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;

import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import org.yeeku.model.*;
import org.yeeku.business.*;
/**
 * @author  yeeku.H.lee kongyeeku@163.com
 * @version  1.0
 * <br>Copyright (C), 2005-2008, yeeku.H.Lee
 * <br>This program is protected by copyright laws.
 * <br>Program Name:
 * <br>Date: 
 */
public class EmployeeDaoHibernate extends HibernateDaoSupport implements EmployeeDao
{
    /**
      * 根据id查找员工
      * @param id 需要查找的员工id
      */  
    public Employee get(Integer id)
    {
        return (Employee)getHibernateTemplate().get(Employee.class , id);
    }
    /**
      * 增加员工
      * @param emp 需要增加的员工
      */       
    public void save(Employee emp)
    {
        getHibernateTemplate().save(emp);
    }

    /**
      * 修改员工
      * @param emp 需要修改的员工
      */  
    public void update(Employee emp)
    {
        getHibernateTemplate().saveOrUpdate(emp);
    }

    /**
      * 删除员工
      * @param id 需要删除的员工id
      */  
    public void delete(Integer id)
    {
        getHibernateTemplate().delete(getHibernateTemplate().get(Employee.class , id));
    }

    /**
      * 删除员工
      * @param emp 需要删除的员工
      */  
    public void delete(Employee emp)
    {
        getHibernateTemplate().delete(emp);
    }
      

    /**
      * 查询全部员工
      * @return 全部员工
      */ 
    public List<Employee> findAll()
    {
        return (List<Employee>)getHibernateTemplate().find("from Employee");
    }

    /**
      * 根据用户名和密码查询员工
      * @param name 员工的用户名
      * @param pass 员工的密码
      * @return 符合用户名和密码的员工集合
      */ 
    public List<Employee> findByNameAndPass(String name , String pass)
    {
        String[] args = {name,pass};
        return (List<Employee>)getHibernateTemplate().find("from Employee where name = ? and pass = ?" , args);           
    }

    /**
      * 根据用户名查询员工
      * @param name 员工的用户名
      * @return 符合用户名的员工
      */ 
    public Employee findByName(String name)
    {
        List<Employee> emps = (List<Employee>)getHibernateTemplate()
            .find("from Employee where name = ? " , name);
        if (emps.size() >= 1)
        {
            return emps.get(0);
        }
        return null;
    }

    /**
      * 根据经理查询员工
      * @param mgr 经理
      * @return 符合经理下的所有员工
      */ 
    public List<Employee> findByMgr(Manager mgr)
    {
        return (List<Employee>)getHibernateTemplate().find("from Employee as e where e.manager = ?" , mgr);
    }
    
    List<Expense> getExpensesByName(String name){
    	
    	
    }
}
